Objectifs et Structure Générale

🛠️ Instructions de transition

Si l’IA a déjà travaillé sur une version précédente du prompt pour UpdatesFaciles, elle doit :

Vérifier les artefacts existants (scripts, documentation, tests) et les adapter aux nouvelles exigences (ex. : support débutants, scripts d’installation/diagnostic, conventions PowerShell).
Diagnostic intelligent à chaque test : L’IA est autorisée à enrichir Test-UpdatesFaciles.ps1 automatiquement, pour détecter les erreurs typiques (modules verrouillés, DLL manquantes, invite interactive bloquante) et proposer une solution dans le message de test.
 Test-UpdatesFaciles.ps1 inclut une auto-vérification des erreurs courantes (modules bloqués, DLL manquantes, prompts interactifs) et propose une correction ou guidance directement dans l’affichage.
Lors de la génération des tests unitaires, Copilot s’assure que tous les paramètres obligatoires sont passés explicitement. Il évite les appels interactifs en encadrant les tests avec des blocs {} et variables locales. Tout test doit être automatisé, reproductible, et silencieux.
Lors de la génération de tests unitaires, Copilot vérifie automatiquement :
- Que tous les blocs Describe et It sont correctement fermés
- Que les cmdlets personnalisées ne déclenchent pas d’interaction manuelle
- Que l’exécution reste silencieuse, reproductible, et utilisable en CI
Lors des appels à des cmdlets personnalisées dans les scripts de diagnostic, l’IA encapsule tout dans des blocs try/catch, et vérifie leur disponibilité avec Get-Command pour éviter les invites interactives liées aux paramètres obligatoires non résolus.
Copilot veille à ce que tout bloc de test manuel inclus dans un module soit encapsulé par une condition InvocationName + ExpectingInput, pour éviter toute exécution pendant les tests unitaires ou l’importation d’un module.

Prioriser les instructions de ce prompt en cas de conflit ou d’ambiguïté avec l’ancien.

Signaler tout conflit potentiel (ex. : module existant non conforme) dans ses réponses, avec suggestions pour résoudre ces conflits.

Si aucun travail préalable n’existe, partir de ce prompt comme base principale.

Cohérence des réponses :

Produire des résultats conformes aux exécutions précédentes, en minimisant les variations stylistiques ou techniques (ex. : utiliser Get-CimInstance pour la détection logicielle).

Lister toute variation (ex. : mise à jour d’un module) dans un bloc “Changements appliqués” à la fin de la réponse.

Produire un outil complet en une seule passe, avec scripts d’installation (Setup-UpdatesFaciles.ps1), de diagnostic/correction (Test-UpdatesFaciles.ps1), fichiers prêts à copier/coller, et instructions claires pour un débutant.

🎯 Objectif du projet
Développer, avec l’assistance d’un copilote IA PowerShell, un assistant modulaire de gestion de logiciels nommé "UpdatesFaciles", destiné aux techniciens IT débutants pour gérer les logiciels installés, portables, et dans le cloud sur 5 à 10 PC. L’outil doit être :

Modulaire : chaque fonctionnalité indépendante et réutilisable.

Documenté : guides utilisateur et développeur générés via platyPS, avec liens croisés entre fichiers markdown.

Sécurisé : logs chiffrés (AES256 + DPAPI), audit RGPD, gestion des droits (rôles Admin, Technicien, Viewer).

Accessible : conforme WCAG 2.1, multilingue, navigation clavier, contrastes élevés.

Extensible : architecture ouverte pour plugins, personnalisation, et API locale.

Performant : scans rapides (< 5 min sur 10 PC), faible consommation CPU/mémoire.

Intuitif : interface graphique ludique avec tableaux, icônes colorées, notifications visuelles, et animations légères.

"One shot" : livré avec scripts d’installation, diagnostic/correction, fichiers à copier/coller, et guide de démarrage rapide.

⚙️ Consignes pour l’IA

S’inspirer des meilleures pratiques PowerShell et de logiciels comme Ninite Pro, Patch My PC, et PortableApps.com.

Prioriser les fonctions polyvalentes et adaptables (ex. : détection, mises à jour, logs) avant les options secondaires (personnalisation avancée).

Assurer la réutilisabilité : fonctions indépendantes et transférables.

Fusion intelligente : harmoniser les redondances entre scripts pour éviter la duplication (ex. : appels multiples à la même fonction).

Modularité stricte : un module = une responsabilité unique.

Réutiliser des modules existants (ex. : Chocolatey, PSWindowsUpdate, CredentialManager, PromptHelper).

Interaction guidée : demander une validation explicite de l’utilisateur à chaque étape.

Après chaque création d’interface, proposer des améliorations UX/UI (tri, filtres, journalisation, affichage en tableau, thèmes clair/sombre, notifications visuelles).

Structurer, documenter, et tester chaque élément avec Pester (≥ 5.7.1).

Support débutant :

Expliquer chaque outil/module (rôle, utilité).
Vérifier automatiquement la présence des modules/outils via Get-Module -ListAvailable or Get-Command.
Fournir des scripts commentés, pédagogiques, et faciles à copier/coller.
Inclure un script d’installation (Setup-UpdatesFaciles.ps1) pour créer la structure, installer les modules (Pester ≥ 5.7.1, platyPS, ChocolateyGet, CredentialManager, PromptHelper), and configurer les dépendances (PowerShell ≥ 7.0, .NET ≥ 4.7.2).
Inclure un script de diagnostic/correction (Test-UpdatesFaciles.ps1) pour tester, identifier les bugs, proposer des solutions, and vérifier les statuts des modules.
Résumer les dépendances et commandes d’installation à la fin de chaque réponse.
Validation automatique : vérifier la présence des modules and installer ceux manquants (ex. : via Install-Module ou Chocolatey).

Conventions PowerShell :

Utiliser des verbes approuvés (Get-, Set-, New-, Invoke-).
Paramètres explicites, typés, avec blocs try/catch pour les opérations critiques.
Encodage UTF-8 sans BOM pour tous les fichiers.
Signer les scripts destinés à la production.
Inclure Get-Help avec .SYNOPSIS, .DESCRIPTION, .EXAMPLE pour chaque fonction.
Bonnes pratiques UI :
Utiliser <Window> classique (éviter MetroWindow dans PowerShell scripté).
Charger les styles MahApps.Metro via Assembly.LoadFrom ou fichiers locaux (Styles/Buttons.xaml, Styles/Colors.xaml, Styles/Controls.xaml).
Éviter les blocs pack://application pour garantir la compatibilité PowerShell.
Intégrer des notifications visuelles (ex. : MessageBox, barres de progression) pour les erreurs ou mises à jour.
Fournir un repli XAML fonctionnel (tableau, boutons) en cas d’échec de MahApps.Metro.
Proposer des workflows clairs et valider chaque bloc avant de poursuivre.
Inclure des liens croisés dans tous les fichiers markdown (README_UpdatesFaciles.md, GuideContributeur.md, Accueil_UpdatesFaciles.md, Historique_Modules.md).

📁 Arborescence du projet

/UpdatesFaciles/
├── Sources/
├── Models/
├── ViewModels/
├── Views/
│   ├── Styles/
│   │   ├── Buttons.xaml
│   │   ├── Colors.xaml
│   │   ├── Controls.xaml
│   ├── MainWindow.xaml
├── Actions/
├── Localization/
├── Plugins/
├── Tests/
├── Libs/
│   ├── MahApps.Metro/
│   │   ├── MahApps.Metro.dll
│   │   ├── ControlzEx.dll
├── Ressources/
│   ├── icon.ico
├── prefs.json
├── logs.txt
├── audit.log
├── README_UpdatesFaciles.md
├── GuideContributeur.md
├── Accueil_UpdatesFaciles.md
├── Historique_Modules.md
├── Setup-UpdatesFaciles.ps1
├── Test-UpdatesFaciles.ps1
├── PromptHelper.psm1
├── main.ps1
├── App.xaml.ps1

🧰 Structure technique

Modèle : Utilisation de [PSCustomObject] ou classes PowerShell, avec JSON Schema (Draft 2020-12).
Logique : Scripts PowerShell (.psm1 pour modules) pour la gestion métier.
Interface : XAML avec styles MahApps or MaterialDesign, fallback vers <Window> si nécessaire.
Sécurité : Chiffrement AES256 + DPAPI pour les secrets, audit dans audit.log, rôles (Admin, Technicien, Viewer).

🧩 Objets principaux

SoftwareApp : Représente un logiciel (nom, version, éditeur, type, état, chemin, source, CanInstall, CanUninstall).
UserPrefs : Préférences utilisateur (thème, langue, dossiers à scanner).
LogEntry : Entrée de journalisation (action, date, résultat).

AuditRecord : Enregistrement d’audit sécurisé.
Chaque objet inclut une structure typée, un exemple JSON, un schéma JSON, un mini-guide, et un test Pester.

📊 Suivi des modules

Module

Rôle

Statut

1
Structure & objets typés

À valider

Module 1 : SoftwareApp.psm1 — Validé
| Éléments | Détails | 
| 📦 Fonction principale | New-SoftwareApp — génère un objet typé représentant un logiciel | 
| 🧪 Tests Pester | 5 tests passés avec succès (SoftwareApp.Tests.ps1) | 
| 🎯 Comportements testés | Création complète, fallback "Inconnu", validation manuelle, détection d’erreurs | 
| 🔐 Sécurité | Validation stricte sur Source et State, sans blocage ValidateSet | 
| 🧰 Fallback | Chaînes vides ou $null retombent sur "Inconnu" automatiquement | 
| 🗂️ Arborescence | Fichier situé dans Modules\SoftwareApp\SoftwareApp.psm1 | 
| 📋 Documentation | Prêt pour ajout de Get-Help, .SYNOPSIS, .EXAMPLE (à venir) | 
| 📈 Statut | Terminé ✅ | 

2
Interface graphique WPF

À valider

3
Détection logicielle

À venir

4
Actions (install/update/rollback)

À venir

5
Préférences utilisateur

À venir

6
Logs & audit

À venir

7
Import/export

À venir

8
Supervision & monitoring

À venir
9
Sécurité & RGPD

À venir

10
Plugins & packaging

À venir

11
Tests automatisés & documentation

À venir

12
Personnalisation UI & langue

À venir

🚀 Guide de démarrage rapide

Prérequis :

PowerShell ≥ 7.0 (fallback 5.1) : choco install powershell-core -y.

.NET ≥ 4.7.2 : choco install dotnetfx --version 4.7.2 -y.

Modules : Pester (≥ 5.7.1), platyPS, ChocolateyGet, CredentialManager, PromptHelper (Install-Module -Name <Module> -Scope CurrentUser -Force).

DLLs MahApps.Metro : Copier MahApps.Metro.dll et ControlzEx.dll dans /Libs/MahApps.Metro.

Lancement : Exécuter .\main.ps1 ou .\App.xaml.ps1 pour démarrer l’application.

Relance Copilot : Exemple : “Copilot, relance le projet UpdatesFaciles à partir du module 3 (Détection logicielle), selon le prompt complet et GuideContributeur.md.”

Modules et Fonctionnalités

🔍 Exigences spécifiques par module

Détection logicielle

Détecter les logiciels installés via le registre Windows (ex. : HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall, HKCU:\Software\...) et les répertoires standards (Program Files, Program Files (x86)).
Identifier les logiciels portables dans des dossiers locaux (ex. : C:\PortableApps) ou cloud synchronisés (OneDrive, Google Drive), en récupérant version et éditeur via métadonnées des .exe si possible.
Détecter les raccourcis sur le bureau et dans le menu Démarrer ($env:USERPROFILE\Desktop, $env:APPDATA\Microsoft\Windows\Start Menu\Programs), en extrayant version et éditeur si disponible.
Vérifier automatiquement les mises à jour disponibles pour les logiciels compatibles (ex. : Firefox, VLC) en interrogeant leurs serveurs ou flux, en utilisant CredentialManager pour gérer les identifiants sécurisés si nécessaire.
Permettre une vérification manuelle des versions pour les logiciels sans système intégré, via des liens ou scripts fournis par l’utilisateur.
Temps de scan : moins de 5 minutes pour 10 PC, avec faible impact CPU/mémoire.
Utiliser des verbes approuvés (Get-, Invoke-), blocs try/catch pour les opérations critiques, et commentaires pédagogiques pour débutants.
Vérifier la présence des modules avant exécution (ex. : Get-Module -ListAvailable).

Actions

Options : installer, mettre à jour, désinstaller, restaurer (rollback).
Support des actions en batch sur plusieurs PC (ex. : mise à jour d’un logiciel sur 5 PC en une seule opération), avec gestion des identifiants via CredentialManager.
Rollback automatique en cas d’échec de mise à jour, avec sauvegarde des versions précédentes.
Utiliser des verbes approuvés, blocs try/catch, et commentaires pédagogiques.

Logs et audit

Logs détaillés (date, action, succès/échec) stockés dans logs.txt, chiffrés avec AES256 + DPAPI.
Audit sécurisé dans audit.log pour traçabilité, conforme RGPD, avec rôles (Admin, Technicien, Viewer).
Alerte visuelle (icône ou notification, ex. : MessageBox) en cas d’erreur, avec option pour consulter les logs dans l’interface.

Interface utilisateur

Tableau de bord avec un DataGrid affichant les propriétés de SoftwareApp (Nom, Version, Source, Éditeur, Chemin).
Options de scan personnalisées via checkboxes (logiciels installés, portables, raccourcis) et un champ pour spécifier le chemin des portables.
Bouton unique pour lancer le scan (ou rôles distincts pour chaque bouton si multiples, ex. : analyse vs scan).
Notifications visuelles : MessageBox pour les résultats de scan (ex. : “X logiciels détectés”), barres de progression pour les actions longues.
Éléments ludiques : icônes colorées (vert : à jour, orange : mise à jour disponible, rouge : problème), graphiques simples (ex. : pourcentage de logiciels à jour), animations légères (ex. : barre de progression).

Options : thème clair/sombre, réorganisation des colonnes, filtres (ex. : par PC ou type de logiciel).

Conformité WCAG 2.1 : navigation clavier, contrastes élevés, descriptions accessibles.

Utiliser <Window> classique, charger les styles MahApps.Metro via Assembly.LoadFrom ou fichiers locaux (Styles/Buttons.xaml, Styles/Colors.xaml, Styles/Controls.xaml), éviter pack://application.

Inclure un ViewModel avec une liste observable (ObservableCollection) peuplée de données fictives (ex. : Firefox, 7-Zip, Notepad++) pour tests.

Repli vers une interface <Window> fonctionnelle (tableau, boutons) en cas d’échec de MahApps.Metro.

📊 Scénarios d’utilisation

Mise à jour massive : "Un technicien scanne 5 PC, voit les logiciels obsolètes dans un tableau, sélectionne ceux à mettre à jour, et lance l’opération en batch."

Gestion cloud : "Un logiciel portable dans OneDrive est détecté sur 10 PC. L’outil vérifie sa version, propose une mise à jour via un lien fourni, et l’applique partout."

🎯 Priorisation des fonctionnalités

Essentiel : Détection rapide (installés, portables, raccourcis), mises à jour automatiques/manuelles, interface claire avec notifications, logs sécurisés.

Secondaire : Personnalisation avancée, multilingue, plugins.

⚡ Performance

Faible consommation CPU/mémoire pour éviter de ralentir les PC.

Limitation de l’impact réseau lors des mises à jour en batch (ex. : téléchargements séquentiels).

🚨 Gestion des erreurs

Messages clairs et adaptés aux débutants (ex. : "Mise à jour échouée : connexion perdue, vérifiez votre réseau et réessayez").

Rollback automatique pour les échecs critiques, avec sauvegarde des fichiers.

Bouton dans l’interface pour relancer une action échouée à partir des logs.

Vérifier automatiquement les modules avant utilisation (ex. : Get-Module -ListAvailable).

🧾 Résumé des rôles de modules

Module

Fonction
1
Initialise structure et objets
2

UI graphique et navigation
3
Détection des applications
4
Actions (install/update)
5
Préférences utilisateur
6
Logs et audit sécurisés
7
Import/export automatisé
8
Supervision & état système
9
Sécurité et conformité SI

10
Extension, plugins, packaging

11

Tests automatisés & documentation
12
Personnalisation interface/langue

Inspiration, Validation et Documentation

🧩 Inspiration des logiciels existants

Ninite Pro : Bibliothèque de logiciels courants avec mises à jour automatiques, pour une gestion centralisée.

Patch My PC : Scan rapide et interface minimaliste, pour une détection efficace.

PortableApps.com : Gestion des logiciels portables avec détection dans des dossiers spécifiques.

🔗 Gestion des mises à jour

Automatique : Pour les logiciels avec flux intégrés (ex. : navigateurs, VLC).

Manuel : Liens ou scripts fournis pour les logiciels portables ou sans système automatique.

Mixte : Option par logiciel pour basculer entre modes automatique et manuel.

🧰 Outils et standards

PowerShell : ≥ 7.0 (fallback 5.1).

.NET : ≥ 4.7.2 pour WPF.

Modules :

Pester (≥ 5.7.1) : Tests unitaires, vérification automatique de la version, éviter imports dans .Tests.ps1.

Plaster (≥ 1.1.3) : Création de squelettes de projet.

platyPS : Génération de documentation automatique.

ChocolateyGet : Gestion des logiciels via Chocolatey.

CredentialManager : Gestion sécurisée des identifiants.

PromptHelper : Utilitaires pour tester MahApps, mettre à jour le journal, afficher le logo ASCII.

Styles : MahApps.Metro (≥ 2.4.7, chargé via Assembly.LoadFrom ou fichiers locaux Styles/Controls.xaml, Styles/Fonts.xaml, Styles/Colors.xaml), fallback vers <Window> si nécessaire.

JSON Schema : Draft 2020-12 pour validation des objets.

Encodage : UTF-8 sans BOM pour tous les fichiers.

🧪 Conditions de validation

Tests Pester (≥ 5.7.1) réussis pour chaque module, couvrant toutes les propriétés des objets (ex. : SoftwareApp), sans imports dans .Tests.ps1.

Documentation utilisable (utilisateur et développeur) générée via platyPS, avec Get-Help pour chaque fonction.

Objets JSON validés avec schémas.

Sécurité couverte : logs chiffrés (AES256 + DPAPI), audit, conformité RGPD, rôles (Admin, Technicien, Viewer).

UX claire, intuitive, avec notifications visuelles (ex. : MessageBox, barres de progression), conforme WCAG 2.1 (navigation clavier, contrastes élevés).

📘 Ressources complémentaires
Le projet inclut des fichiers d’appui :

README_UpdatesFaciles.md : Résumé technique, installation, utilisation, tableau des statuts des modules.

GuideContributeur.md : Conventions PowerShell (verbes approuvés, try/catch, UTF-8), bonnes pratiques UI, exigences de validation.

Accueil_UpdatesFaciles.md : Guide utilisateur avec instructions simples et démarrage rapide.

Historique_Modules.md : Journal requis des validations, dates, et remarques par module.

Inclure des liens croisés dans chaque fichier markdown vers les autres ressources.

🧠 Mise à jour documentaire intelligente
L’IA est autorisée à :

Mettre à jour les fichiers markdown (README_UpdatesFaciles.md, GuideContributeur.md, Accueil_UpdatesFaciles.md, Historique_Modules.md).

Enrichir, corriger, ou compléter les sections après chaque étape validée, en utilisant Update-PromptNotes de PromptHelper.psm1 pour journaliser les changements.

Proposer une nouvelle version du fichier markdown en cas de modification majeure (ex. : ajout de module, changement de workflow).

Attendre la confirmation utilisateur avant de remplacer un fichier source.

🎬 Commande initiale pour l’IA
"Copilot, lance le développement d’UpdatesFaciles :

Crée la structure du projet (/UpdatesFaciles) avec un script d’installation (Setup-UpdatesFaciles.ps1) qui configure les dossiers, installe les modules (Pester ≥ 5.7.1, platyPS, ChocolateyGet, CredentialManager, PromptHelper), et vérifie les dépendances (PowerShell ≥ 7.0, .NET ≥ 4.7.2).

Génère l’objet SoftwareApp with son JSON Schema, fusionnant les versions complète et simplifiée avec paramètres optionnels.

Fournis la documentation utilisateur et développeur en markdown, avec liens croisés et Get-Help.

Ajoute des tests Pester complets couvrant toutes les propriétés de SoftwareApp.

Propose l’intégration à main.ps1 ou App.xaml.ps1, avec une interface XAML (MainWindow.xaml) incluant un DataGrid, options de scan, et notifications visuelles.

Fournis un script de diagnostic/correction (Test-UpdatesFaciles.ps1) pour tester, identifier les bugs, proposer des solutions, and vérifier les statuts des modules.
Attends ma validation avant de continuer."

📎 Regroupement final

README complet : Résumé technique, installation, utilisation, assemblage, tableau des statuts.

Doc utilisateur : Markdown clair, affichable in-app, adapté aux débutants, avec guide de démarrage rapide.

Manuel développeur : Guide technique, conventions PowerShell, bonnes pratiques UI.

Structure CI/CD : Instructions pour packaging et intégration.

UI guide intégré : Documentation UX dans l’interface, avec notifications visuelles.

🤖 IA autonome à relance guidée

Si un module, script, ou fichier est incomplet, l’IA :

Propose automatiquement sa création.

Complète sans attendre une relance explicite, tout en respectant l’architecture.

L’IA utilise un affichage structuré (blocs numérotés si volumineux, résumé final, point d’intégration clair).

À chaque relance, l’IA :

Résume l’état actuel du projet, avec tableau des statuts.

Propose des améliorations UX/UI (tri, filtres, styles, notifications, actions).

Injecte des exemples réalistes (ex. : logiciels fictifs comme Firefox, 7-Zip, Notepad++).

L’IA valide automatiquement la présence des modules (ex. : via Get-Module -ListAvailable) et installe ceux manquants (ex. : Install-Module ou Chocolatey).

🤖 IA autonome à relance guidée (mise à jour)
- Lorsqu’un module ou fichier est incomplet ou absent, Copilot :
  - le propose automatiquement,
  - le complète sans attendre de relance explicite,
  - conserve la cohérence du projet en respectant l’arborescence, les dépendances, et les conventions PowerShell.

- À chaque relance du projet, Copilot :
  - résume l’état actuel du projet avec statut des modules,
  - injecte automatiquement des exemples réalistes (logiciels fictifs comme Firefox, 7-Zip, Notepad++) pour tester l’interface,
  - propose les améliorations UX/UI standard : tri, filtres, styles, notifications, barre de progression, boutons export/import.

- Copilot est autorisé à :
  - créer un module `UpdateProvider.psm1` si besoin pour centraliser les stratégies de mise à jour par type de logiciel (installé, portable, cloud, etc.),
  - générer un manifeste de module global (`ModuleManifest.psd1`) regroupant les versions, auteurs, dépendances, rôles, et permissions,
  - simuler des données test, styles alternatifs, et interfaces de secours si MahApps échoue.

- Copilot valide automatiquement la présence des modules avant utilisation (ex. : Get-Module -ListAvailable) et installe ceux manquants via Install-Module ou Chocolatey.

🎨 Mises à jour intégrées

Icône affichée via $window.SetValue(...) with chemin Ressources/icon.ico.

ViewModel simulé avec 3 logiciels fictifs (Firefox, 7-Zip, Notepad++).

Fallback vers <Window> classique dans le XAML si MahApps.Metro pose problème, avec interface fonctionnelle (tableau, boutons).

Styles MahApps.Metro chargés via Assembly.LoadFrom ou fichiers locaux (Styles/Buttons.xaml, Styles/Colors.xaml, Styles/Controls.xaml).

Logo ASCII intégré dans App.xaml.ps1 via Write-PromptLogo.

Notifications visuelles (ex. : MessageBox, barres de progression) pour erreurs ou mises à jour réussies.

Suggestion future : migration vers une infrastructure MVVM complète avec App.xaml compilé.

Module 1 : SoftwareApp.psm1
- État : ✅ Validé
- Tests Pester : 5 tests automatisés passant avec succès.
- Création avec tous les paramètres
- Fallback sur "Inconnu" si paramètres absents ou vides
- Validation manuelle des valeurs autorisées (Source, State)
- Détection d’arguments invalides avec levée d’exception
- Fonction : New-SoftwareApp
- Génère un objet typé SoftwareApp réutilisable dans l’interface et les modules de détection, mise à jour, et audit.
- Fallback intelligent :
- En cas de chaîne vide ou $null → source et état retombent automatiquement sur "Inconnu"
- Validation manuelle :
- Utilise $validSources / $validStates en tableau plutôt que ValidateSet pour permettre les fallback souples tout en gardant la robustesse.
- Documentation intégrée :
- Write-Host au chargement pour traçabilité
- Prépare l’ajout de Get-Help et .EXAMPLE dans les versions futures.

RÉSUMÉ EXPRESS – Corrections PowerShell/Batch & WPF
1️⃣ Fonctions PowerShell

Toujours DÉFINIR ou IMPORTER les fonctions (ex : Write-PromptLogo) avant de les utiliser.

Si tu appelles une fonction d’un autre script, charge le module .psm1 avant (Import-Module).

2️⃣ Export-ModuleMember

À utiliser seulement dans un module .psm1 (jamais dans un .ps1).

Si erreur, soit supprime la ligne, soit renomme le fichier en .psm1.

3️⃣ Paramètres en double

Dans un param() ou une fonction, un même nom de paramètre qu’UNE FOIS (typiquement $Debug).

4️⃣ Diagramme Diagnostic

Projet : OK globalement.

Seule exception fréquente : ressources UI manquantes (Views\MainWindow.xaml, Ressources, DLL MahApps.Metro).

Lancer le script avec -FixIssues pour tenter l’auto-réparation.

Sinon, remettre les fichiers/dossiers à la main.

5️⃣ XAML + PowerShell

Supprimer l’attribut x:Class du XAML.

Corriger tous les chemins « pack://... » vers des chemins réels si pas de compilation .NET.

UN SEUL x:Name par contrôle dans le XAML.

Tous les événements mentionnés dans le XAML doivent avoir une fonction correspondante dans le script PowerShell.

6️⃣ Bonnes pratiques

Charger modules/fonctions AVANT première utilisation.

Si besoin de partages : .psm1 + Export-ModuleMember.

Pour scripts .ps1 purs : pas besoin d’Export-ModuleMember.

Toujours vérifier présence physique des fichiers (xaml, icône, DLL, etc).


A chaque fichier que tu me donne, précise le chemin dans lequel je dois le mettre,
si de nouvaux dossier doivent être créer, dit le explicitement, il faudra aussi les ajouter ou les prévoir pour faire évoluer le script d'installation